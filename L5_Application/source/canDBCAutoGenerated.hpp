/*
 * canDBCAutoGenerated.hpp
 *
 *  Created on: Nov 17, 2015
 *      Author: Gaurav
 */

#ifndef L5_APPLICATION_SOURCE_CANDBCAUTOGENERATED_HPP_
#define L5_APPLICATION_SOURCE_CANDBCAUTOGENERATED_HPP_


/// DBC file: Group2.dbc    Self node: MASTER
/// This file should be included by a source file, for example: #include "generated.c"
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>


/// Missing in Action structure
typedef struct {
    uint32_t is_mia : 1;          ///< Missing in action flag
    uint32_t mia_counter_ms : 31; ///< Missing in action counter
} mia_info_t;

/// CAN message header structure
typedef struct {
    uint32_t mid; ///< Message ID of the message
    uint8_t  dlc; ///< Data length of the message
} msg_hdr_t;

static const msg_hdr_t MASTER_TX_HEARTBEAT_HDR =              {  100, 1 };
static const msg_hdr_t SENSOR_TX_SONARS_HDR =                 {  200, 6 };
static const msg_hdr_t MASTER_TX_MOTOR_CMD_HDR =              {  300, 1 };


/// Message: HEARTBEAT from 'MASTER', DLC: 1 byte(s), MID: 100
typedef struct {
    uint8_t MASTER_HEARTBEAT_cmd;        ///< B7:0   Destination: SENSOR,MOTOR

    mia_info_t mia_info;
} MASTER_TX_HEARTBEAT_t;


/// Message: SONARS from 'SENSOR', DLC: 6 byte(s), MID: 200
typedef struct {
    float SENSOR_SONARS_left;            ///< B11:0   Destination: MASTER,IO
    float SENSOR_SONARS_middle;          ///< B23:12   Destination: MASTER,IO
    float SENSOR_SONARS_right;           ///< B35:24   Destination: MASTER,IO
    float SENSOR_SONARS_rear;            ///< B47:36   Destination: MASTER,IO

    mia_info_t mia_info;
} SENSOR_TX_SONARS_t;


/// Message: MOTOR_CMD from 'MASTER', DLC: 1 byte(s), MID: 300
typedef struct {
    int8_t MOTOR_CMD_steer;              ///< B3:0  Min: -5 Max: 5   Destination: MOTOR
    uint8_t MOTOR_CMD_drive;             ///< B7:4  Min: 0 Max: 9   Destination: MOTOR

    mia_info_t mia_info;
} MASTER_TX_MOTOR_CMD_t;


/// These 'externs' need to be defined in a source file of your project
extern const uint32_t HEARTBEAT__MIA_MS;
extern const MASTER_TX_HEARTBEAT_t HEARTBEAT__MIA_MSG;
extern const uint32_t SONARS__MIA_MS;
extern const SENSOR_TX_SONARS_t SONARS__MIA_MSG;
extern const uint32_t MOTOR_CMD__MIA_MS;
extern const MASTER_TX_MOTOR_CMD_t MOTOR_CMD__MIA_MSG;

/// Encode MASTER's 'HEARTBEAT' message
/// @returns the message header of this message
static msg_hdr_t MASTER_TX_HEARTBEAT_encode(uint64_t *to, MASTER_TX_HEARTBEAT_t *from)
{
    *to = 0; ///< Default the entire destination data with zeroes
    uint8_t *bytes = (uint8_t*) to;
    uint64_t raw_signal;

    raw_signal = ((uint64_t)(((from->MASTER_HEARTBEAT_cmd - (0)) / 1.0) + 0.5)) & 0xff;
    bytes[0] |= (((uint8_t)(raw_signal >> 0) & 0xff) << 0); ///< 8 bit(s) to B0

    return MASTER_TX_HEARTBEAT_HDR;
}


/// Encode SENSOR's 'SONARS' message
/// @returns the message header of this message
static msg_hdr_t SENSOR_TX_SONARS_encode(uint64_t *to, SENSOR_TX_SONARS_t *from)
{
    *to = 0; ///< Default the entire destination data with zeroes
    uint8_t *bytes = (uint8_t*) to;
    uint64_t raw_signal;

    raw_signal = ((uint64_t)(((from->SENSOR_SONARS_left - (0)) / 0.1) + 0.5)) & 0xfff;
    bytes[0] |= (((uint8_t)(raw_signal >> 0) & 0xff) << 0); ///< 8 bit(s) to B0
    bytes[1] |= (((uint8_t)(raw_signal >> 8) & 0x0f) << 0); ///< 4 bit(s) to B8

    raw_signal = ((uint64_t)(((from->SENSOR_SONARS_middle - (0)) / 0.1) + 0.5)) & 0xfff;
    bytes[1] |= (((uint8_t)(raw_signal >> 0) & 0x0f) << 4); ///< 4 bit(s) to B12
    bytes[2] |= (((uint8_t)(raw_signal >> 4) & 0xff) << 0); ///< 8 bit(s) to B16

    raw_signal = ((uint64_t)(((from->SENSOR_SONARS_right - (0)) / 0.1) + 0.5)) & 0xfff;
    bytes[3] |= (((uint8_t)(raw_signal >> 0) & 0xff) << 0); ///< 8 bit(s) to B24
    bytes[4] |= (((uint8_t)(raw_signal >> 8) & 0x0f) << 0); ///< 4 bit(s) to B32

    raw_signal = ((uint64_t)(((from->SENSOR_SONARS_rear - (0)) / 0.1) + 0.5)) & 0xfff;
    bytes[4] |= (((uint8_t)(raw_signal >> 0) & 0x0f) << 4); ///< 4 bit(s) to B36
    bytes[5] |= (((uint8_t)(raw_signal >> 4) & 0xff) << 0); ///< 8 bit(s) to B40

    return SENSOR_TX_SONARS_HDR;
}


/// Encode MASTER's 'MOTOR_CMD' message
/// @returns the message header of this message
static msg_hdr_t MASTER_TX_MOTOR_CMD_encode(uint64_t *to, MASTER_TX_MOTOR_CMD_t *from)
{
    *to = 0; ///< Default the entire destination data with zeroes
    uint8_t *bytes = (uint8_t*) to;
    uint64_t raw_signal;

    if(from->MOTOR_CMD_steer < -5) { from->MOTOR_CMD_steer = -5; }
    if(from->MOTOR_CMD_steer > 5) { from->MOTOR_CMD_steer = 5; }
    raw_signal = ((uint64_t)(((from->MOTOR_CMD_steer - (-5)) / 1.0) + 0.5)) & 0x0f;
    bytes[0] |= (((uint8_t)(raw_signal >> 0) & 0x0f) << 0); ///< 4 bit(s) to B0

    if(from->MOTOR_CMD_drive < 0) { from->MOTOR_CMD_drive = 0; }
    if(from->MOTOR_CMD_drive > 9) { from->MOTOR_CMD_drive = 9; }
    raw_signal = ((uint64_t)(((from->MOTOR_CMD_drive - (0)) / 1.0) + 0.5)) & 0x0f;
    bytes[0] |= (((uint8_t)(raw_signal >> 0) & 0x0f) << 4); ///< 4 bit(s) to B4

    return MASTER_TX_MOTOR_CMD_HDR;
}


/// Decode MASTER's 'HEARTBEAT' message
/// @param hdr  The header of the message to validate its DLC and MID; this can be NULL to skip this check
static inline bool MASTER_TX_HEARTBEAT_decode(MASTER_TX_HEARTBEAT_t *to, const uint64_t *from, const msg_hdr_t *hdr)
{
    const bool success = true;
    if (NULL != hdr && (hdr->dlc != MASTER_TX_HEARTBEAT_HDR.dlc || hdr->mid != MASTER_TX_HEARTBEAT_HDR.mid)) {
        return !success;
    }
    uint64_t raw_signal;
    uint64_t bits_from_byte;
    const uint8_t *bytes = (const uint8_t*) from;

    raw_signal = 0;
    bits_from_byte = ((bytes[0] >> 0) & 0xff); ///< 8 bit(s) from B0
    raw_signal    |= (bits_from_byte << 0);
    to->MASTER_HEARTBEAT_cmd = (raw_signal * 1.0) + (0);

    to->mia_info.mia_counter_ms = 0; ///< Reset the MIA counter
    return success;
}


/// Decode SENSOR's 'SONARS' message
/// @param hdr  The header of the message to validate its DLC and MID; this can be NULL to skip this check
static inline bool SENSOR_TX_SONARS_decode(SENSOR_TX_SONARS_t *to, const uint64_t *from, const msg_hdr_t *hdr)
{
    const bool success = true;
    if (NULL != hdr && (hdr->dlc != SENSOR_TX_SONARS_HDR.dlc || hdr->mid != SENSOR_TX_SONARS_HDR.mid)) {
        return !success;
    }
    uint64_t raw_signal;
    uint64_t bits_from_byte;
    const uint8_t *bytes = (const uint8_t*) from;

    raw_signal = 0;
    bits_from_byte = ((bytes[0] >> 0) & 0xff); ///< 8 bit(s) from B0
    raw_signal    |= (bits_from_byte << 0);
    bits_from_byte = ((bytes[1] >> 0) & 0x0f); ///< 4 bit(s) from B8
    raw_signal    |= (bits_from_byte << 8);
    to->SENSOR_SONARS_left = (raw_signal * 0.1) + (0);

    raw_signal = 0;
    bits_from_byte = ((bytes[1] >> 4) & 0x0f); ///< 4 bit(s) from B12
    raw_signal    |= (bits_from_byte << 0);
    bits_from_byte = ((bytes[2] >> 0) & 0xff); ///< 8 bit(s) from B16
    raw_signal    |= (bits_from_byte << 4);
    to->SENSOR_SONARS_middle = (raw_signal * 0.1) + (0);

    raw_signal = 0;
    bits_from_byte = ((bytes[3] >> 0) & 0xff); ///< 8 bit(s) from B24
    raw_signal    |= (bits_from_byte << 0);
    bits_from_byte = ((bytes[4] >> 0) & 0x0f); ///< 4 bit(s) from B32
    raw_signal    |= (bits_from_byte << 8);
    to->SENSOR_SONARS_right = (raw_signal * 0.1) + (0);

    raw_signal = 0;
    bits_from_byte = ((bytes[4] >> 4) & 0x0f); ///< 4 bit(s) from B36
    raw_signal    |= (bits_from_byte << 0);
    bits_from_byte = ((bytes[5] >> 0) & 0xff); ///< 8 bit(s) from B40
    raw_signal    |= (bits_from_byte << 4);
    to->SENSOR_SONARS_rear = (raw_signal * 0.1) + (0);

    to->mia_info.mia_counter_ms = 0; ///< Reset the MIA counter
    return success;
}


/// Decode MASTER's 'MOTOR_CMD' message
/// @param hdr  The header of the message to validate its DLC and MID; this can be NULL to skip this check
static inline bool MASTER_TX_MOTOR_CMD_decode(MASTER_TX_MOTOR_CMD_t *to, const uint64_t *from, const msg_hdr_t *hdr)
{
    const bool success = true;
    if (NULL != hdr && (hdr->dlc != MASTER_TX_MOTOR_CMD_HDR.dlc || hdr->mid != MASTER_TX_MOTOR_CMD_HDR.mid)) {
        return !success;
    }
    uint64_t raw_signal;
    uint64_t bits_from_byte;
    const uint8_t *bytes = (const uint8_t*) from;

    raw_signal = 0;
    bits_from_byte = ((bytes[0] >> 0) & 0x0f); ///< 4 bit(s) from B0
    raw_signal    |= (bits_from_byte << 0);
    to->MOTOR_CMD_steer = (raw_signal * 1.0) + (-5);

    raw_signal = 0;
    bits_from_byte = ((bytes[0] >> 4) & 0x0f); ///< 4 bit(s) from B4
    raw_signal    |= (bits_from_byte << 0);
    to->MOTOR_CMD_drive = (raw_signal * 1.0) + (0);

    to->mia_info.mia_counter_ms = 0; ///< Reset the MIA counter
    return success;
}


/// Handle the MIA for MASTER's 'HEARTBEAT' message
/// @param   time_incr_ms  The time to increment the MIA counter with
/// @returns true if the MIA just occurred
/// @post    If the MIA counter is not reset, and goes beyond the MIA value, the MIA flag is set
static inline bool MASTER_TX_HEARTBEAT_handle_mia(MASTER_TX_HEARTBEAT_t *msg, uint32_t time_incr_ms)
{
    bool mia_occurred = false;
    const mia_info_t old_mia = msg->mia_info;
    msg->mia_info.is_mia = (msg->mia_info.mia_counter_ms >= HEARTBEAT__MIA_MS);

    if (!msg->mia_info.is_mia) {
        msg->mia_info.mia_counter_ms += time_incr_ms;
    }
    else if(!old_mia.is_mia)   {
        // Copy MIA struct, then re-write the MIA counter and is_mia that is overwriten
        *msg = HEARTBEAT__MIA_MSG;
        msg->mia_info.mia_counter_ms = HEARTBEAT__MIA_MS;
        msg->mia_info.is_mia = true;
        mia_occurred = true;
    }

    return mia_occurred;
}

/// Handle the MIA for SENSOR's 'SONARS' message
/// @param   time_incr_ms  The time to increment the MIA counter with
/// @returns true if the MIA just occurred
/// @post    If the MIA counter is not reset, and goes beyond the MIA value, the MIA flag is set
static inline bool SENSOR_TX_SONARS_handle_mia(SENSOR_TX_SONARS_t *msg, uint32_t time_incr_ms)
{
    bool mia_occurred = false;
    const mia_info_t old_mia = msg->mia_info;
    msg->mia_info.is_mia = (msg->mia_info.mia_counter_ms >= SONARS__MIA_MS);

    if (!msg->mia_info.is_mia) {
        msg->mia_info.mia_counter_ms += time_incr_ms;
    }
    else if(!old_mia.is_mia)   {
        // Copy MIA struct, then re-write the MIA counter and is_mia that is overwriten
        *msg = SONARS__MIA_MSG;
        msg->mia_info.mia_counter_ms = SONARS__MIA_MS;
        msg->mia_info.is_mia = true;
        mia_occurred = true;
    }

    return mia_occurred;
}

/// Handle the MIA for MASTER's 'MOTOR_CMD' message
/// @param   time_incr_ms  The time to increment the MIA counter with
/// @returns true if the MIA just occurred
/// @post    If the MIA counter is not reset, and goes beyond the MIA value, the MIA flag is set
static inline bool MASTER_TX_MOTOR_CMD_handle_mia(MASTER_TX_MOTOR_CMD_t *msg, uint32_t time_incr_ms)
{
    bool mia_occurred = false;
    const mia_info_t old_mia = msg->mia_info;
    msg->mia_info.is_mia = (msg->mia_info.mia_counter_ms >= MOTOR_CMD__MIA_MS);

    if (!msg->mia_info.is_mia) {
        msg->mia_info.mia_counter_ms += time_incr_ms;
    }
    else if(!old_mia.is_mia)   {
        // Copy MIA struct, then re-write the MIA counter and is_mia that is overwriten
        *msg = MOTOR_CMD__MIA_MSG;
        msg->mia_info.mia_counter_ms = MOTOR_CMD__MIA_MS;
        msg->mia_info.is_mia = true;
        mia_occurred = true;
    }

    return mia_occurred;
}


#endif /* L5_APPLICATION_SOURCE_CANDBCAUTOGENERATED_HPP_ */
